{"version":3,"file":"js/884.e827f800.js","mappings":"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","sources":["webpack://meiban-app/./src/utils/astrologyDataAdapter.js","webpack://meiban-app/./node_modules/core-js/modules/es.object.from-entries.js"],"sourcesContent":["/**\n * 星盘数据适配器 - 处理API数据格式转换\n * src/utils/astrologyDataAdapter.js\n */\n\n// 行星代码映射表\nconst PLANET_CODE_MAP = {\n  '0': 'sun',        // 太阳\n  '1': 'moon',       // 月亮\n  '2': 'mercury',    // 水星\n  '3': 'venus',      // 金星\n  '4': 'mars',       // 火星\n  '5': 'jupiter',    // 木星\n  '6': 'saturn',     // 土星\n  '7': 'uranus',     // 天王星\n  '8': 'neptune',    // 海王星\n  '9': 'pluto',      // 冥王星\n  't': 'trueNode',   // 北交点\n  '10': 'ascendant' // 上升点\n};\n\n// 星座中英文对照表\nconst ZODIAC_MAPPING = {\n  'Aries': '白羊座',\n  'Taurus': '金牛座', \n  'Gemini': '双子座',\n  'Cancer': '巨蟹座',\n  'Leo': '狮子座',\n  'Virgo': '处女座',\n  'Libra': '天秤座',\n  'Scorpio': '天蝎座',\n  'Sagittarius': '射手座',\n  'Capricorn': '摩羯座',\n  'Aquarius': '水瓶座',\n  'Pisces': '双鱼座'\n};\n\n// 反向映射（中文到英文）\nconst ZODIAC_REVERSE_MAPPING = Object.fromEntries(\n  Object.entries(ZODIAC_MAPPING).map(([en, zh]) => [zh, en])\n);\n\n/**\n * 转换星座名称（英文到中文）\n * @param {string} englishName - 英文星座名\n * @returns {string} 中文星座名\n */\nfunction convertZodiacName(englishName) {\n  return ZODIAC_MAPPING[englishName] || englishName;\n}\n\n/**\n * 从API响应中提取行星数据\n * @param {Object} apiData - API返回的原始数据\n * @returns {Object} 转换后的行星位置数据\n */\nfunction extractPlanetPositions(apiData) {\n  const positions = {};\n  \n  if (!apiData.planet || !Array.isArray(apiData.planet)) {\n    console.warn('API数据中缺少行星信息');\n    return positions;\n  }\n  \n  // 遍历API返回的行星数据\n  apiData.planet.forEach((planetData) => {\n    const planetKey = PLANET_CODE_MAP[planetData.code_name];\n\n    if (planetKey && planetData.sign) {\n      positions[planetKey] = {\n        sign: convertZodiacName(planetData.sign.sign_english),\n        degree: planetData.sign.deg || 0,\n        minute: planetData.sign.min || 0,\n        second: planetData.sign.sec || 0,\n        longitude: planetData.longitude || 0,\n        // 保留原始API数据以备后用\n        _raw: {\n          code_name: planetData.code_name,\n          planet_english: planetData.planet_english,\n          planet_chinese: planetData.planet_chinese,\n          house_id: planetData.house_id,\n          speed: planetData.speed\n        }\n      };\n    }\n  });\n\n  // 从宫位数据中提取中天信息（第10宫宫头就是中天）\n  if (apiData.house && Array.isArray(apiData.house)) {\n    // 查找第10宫（事业宫），第10宫的宫头就是中天\n    const house10 = apiData.house.find(house => house.house_id === 10);\n\n    if (house10 && house10.sign) {\n      positions.midheaven = {\n        sign: convertZodiacName(house10.sign.sign_english),\n        degree: house10.sign.deg || 0,\n        minute: house10.sign.min || 0,\n        second: house10.sign.sec || 0,\n        longitude: house10.longitude || 0,\n        // 保留原始数据\n        _raw: {\n          house_id: house10.house_id,\n          house_life: house10.house_life,\n          sign_english: house10.sign.sign_english,\n          sign_chinese: house10.sign.sign_chinese\n        }\n      };\n    }\n  }\n\n  // 检查是否包含必要的三要素\n  const essentials = ['sun', 'moon', 'ascendant'];\n  const missing = essentials.filter(key => !positions[key]);\n\n  if (missing.length > 0) {\n    console.warn('缺少重要行星数据:', missing);\n  }\n\n  return positions;\n}\n\n/**\n * 从API响应中提取宫位数据\n * @param {Object} apiData - API返回的原始数据\n * @returns {Object} 转换后的宫位数据\n */\nfunction extractHouseData(apiData) {\n  const houses = {};\n  \n  if (!apiData.house || !Array.isArray(apiData.house)) {\n    console.warn('API数据中缺少宫位信息');\n    return houses;\n  }\n  \n  apiData.house.forEach(houseData => {\n    const houseNumber = houseData.house_id;\n    \n    houses[houseNumber] = {\n      sign: convertZodiacName(houseData.sign.sign_english),\n      degree: houseData.sign.deg || 0,\n      minute: houseData.sign.min || 0,\n      second: houseData.sign.sec || 0,\n      longitude: houseData.longitude || 0,\n      life_palace: houseData.house_life || '',\n      planets: (houseData.planet_array || []).map(planet => ({\n        code_name: planet.code_name,\n        name: planet.planet_chinese,\n        degree: planet.deg || 0,\n        minute: planet.min || 0,\n        second: planet.sec || 0\n      })),\n      // 保留坐标信息用于绘制\n      coordinates: {\n        x: houseData.z_x,\n        y: houseData.z_y\n      }\n    };\n  });\n  \n  return houses;\n}\n\n/**\n * 从API响应中提取相位数据\n * @param {Object} apiData - API返回的原始数据\n * @returns {Array} 转换后的相位数据\n */\nfunction extractAspectData(apiData) {\n  const aspects = [];\n  \n  if (!apiData.planet) {\n    return aspects;\n  }\n  \n  // 遍历行星的相位信息\n  apiData.planet.forEach(planetData => {\n    if (planetData.planet_allow_degree && Array.isArray(planetData.planet_allow_degree)) {\n      planetData.planet_allow_degree.forEach(aspect => {\n        const planet1Key = PLANET_CODE_MAP[planetData.code_name];\n        const planet2Key = PLANET_CODE_MAP[aspect.code_name];\n        \n        if (planet1Key && planet2Key) {\n          aspects.push({\n            planet1: planet1Key,\n            planet2: planet2Key,\n            angle: aspect.allow || 0,\n            orb: {\n              degree: aspect.deg || 0,\n              minute: aspect.min || 0,\n              second: aspect.sec || 0\n            },\n            type: aspect.in_out === '1' ? 'applying' : 'separating'\n          });\n        }\n      });\n    }\n  });\n  \n  return aspects;\n}\n\n/**\n * 从API响应中提取元素分布数据\n * @param {Object} apiData - API返回的原始数据\n * @returns {Object} 转换后的元素分布数据\n */\nfunction extractElementDistribution(apiData) {\n  const distribution = {\n    elements: { fire: 0, earth: 0, air: 0, water: 0 },\n    qualities: { cardinal: 0, fixed: 0, mutable: 0 },\n    polarities: { positive: 0, negative: 0 }\n  };\n  \n  if (!apiData.attribute) {\n    return distribution;\n  }\n  \n  // 映射中文元素到英文\n  const elementMap = {\n    fire: ['火相'],\n    earth: ['土相'], \n    air: ['风相'],\n    water: ['水相']\n  };\n  \n  const qualityMap = {\n    cardinal: ['本位'],\n    fixed: ['固定'],\n    mutable: ['变动']\n  };\n  \n  // 统计各个元素和性质的分布\n  Object.entries(apiData.attribute).forEach(([key, planets]) => {\n    if (Array.isArray(planets)) {\n      // 根据key判断是哪种属性\n      Object.entries(elementMap).forEach(([element, chineseNames]) => {\n        if (chineseNames.includes(key)) {\n          distribution.elements[element] = planets.length;\n        }\n      });\n      \n      Object.entries(qualityMap).forEach(([quality, chineseNames]) => {\n        if (chineseNames.includes(key)) {\n          distribution.qualities[quality] = planets.length;\n        }\n      });\n    }\n  });\n  \n  return distribution;\n}\n\n/**\n * 生成运势评分（基于行星强弱和相位）\n * @param {Object} planetPositions - 行星位置数据\n * @param {Array} aspects - 相位数据\n * @returns {Object} 运势评分\n */\nfunction generateFortuneScores(planetPositions, aspects) {\n  // 简化的运势评分算法\n  const scores = {\n    career: 3,   // 事业\n    wealth: 3,   // 财富\n    love: 3,     // 爱情\n    health: 3,   // 健康\n    overall: 3   // 总体\n  };\n  \n  // 基于太阳和月亮位置调整分数\n  if (planetPositions.sun) {\n    // 火象星座在事业上有优势\n    const fireSign = ['白羊座', '狮子座', '射手座'];\n    if (fireSign.includes(planetPositions.sun.sign)) {\n      scores.career += 1;\n    }\n  }\n  \n  if (planetPositions.moon) {\n    // 水象星座在情感上更敏感\n    const waterSign = ['巨蟹座', '天蝎座', '双鱼座'];\n    if (waterSign.includes(planetPositions.moon.sign)) {\n      scores.love += 1;\n    }\n  }\n  \n  // 基于相位数量调整总体分数\n  const beneficAspects = aspects.filter(a => [60, 120].includes(a.angle));\n  const maleficAspects = aspects.filter(a => [90, 180].includes(a.angle));\n  \n  scores.overall += beneficAspects.length * 0.5 - maleficAspects.length * 0.3;\n  \n  // 确保分数在1-5范围内\n  Object.keys(scores).forEach(key => {\n    scores[key] = Math.max(1, Math.min(5, Math.round(scores[key])));\n  });\n  \n  return scores;\n}\n\n/**\n * 将API数据转换为应用内部格式\n * @param {Object} apiData - API返回的原始数据\n * @returns {Object} 转换后的占星数据\n */\nexport function convertApiDataToAppFormat(apiData) {\n  try {\n    console.log('🔄 开始转换API数据格式');\n    console.log('📥 原始API数据:', apiData);\n    \n    // 提取各类数据\n    const planetPositions = extractPlanetPositions(apiData);\n    const houses = extractHouseData(apiData);\n    const aspects = extractAspectData(apiData);\n    const elementDistribution = extractElementDistribution(apiData);\n    \n    // 生成运势评分\n    const fortuneScores = generateFortuneScores(planetPositions, aspects);\n    \n    // 构建最终数据结构\n    const convertedData = {\n      // 行星位置（保持与现有应用兼容的格式）\n      astrologyPositions: planetPositions,\n      \n      // 宫位信息\n      houses: houses,\n      \n      // 相位信息\n      aspects: aspects,\n      \n      // 元素分布\n      elementDistribution: elementDistribution,\n      \n      // 运势信息\n      fortune: {\n        overview: fortuneScores.overall >= 4 ? '大吉' : fortuneScores.overall >= 3 ? '中吉' : '平常',\n        career: '★'.repeat(fortuneScores.career) + '☆'.repeat(5 - fortuneScores.career),\n        wealth: '★'.repeat(fortuneScores.wealth) + '☆'.repeat(5 - fortuneScores.wealth),\n        love: '★'.repeat(fortuneScores.love) + '☆'.repeat(5 - fortuneScores.love),\n        health: '★'.repeat(fortuneScores.health) + '☆'.repeat(5 - fortuneScores.health),\n        scores: fortuneScores\n      },\n      \n      // SVG图表（如果API返回了的话）\n      chart: {\n        svg: apiData.svg || null,\n        hasChart: !!apiData.svg\n      },\n      \n      // 保留原始数据用于调试\n      _rawApiData: process.env.NODE_ENV === 'development' ? apiData : null,\n      _convertedAt: new Date().toISOString()\n    };\n    \n    console.log('✅ 数据转换完成');\n    console.log('📤 转换后数据:', convertedData);\n    \n    return convertedData;\n    \n  } catch (error) {\n    console.error('❌ 数据转换失败:', error);\n    throw new Error(`数据转换失败: ${error.message}`);\n  }\n}\n\n/**\n * 验证转换后的数据完整性\n * @param {Object} convertedData - 转换后的数据\n * @returns {Object} 验证结果\n */\nexport function validateConvertedData(convertedData) {\n  const validation = {\n    isValid: true,\n    errors: [],\n    warnings: []\n  };\n  \n  // 检查必要的行星位置\n  const requiredPlanets = ['sun', 'moon', 'ascendant'];\n  requiredPlanets.forEach(planet => {\n    if (!convertedData.astrologyPositions[planet]) {\n      validation.errors.push(`缺少${planet}位置信息`);\n      validation.isValid = false;\n    }\n  });\n  \n  // 检查数据格式\n  if (!convertedData.astrologyPositions || typeof convertedData.astrologyPositions !== 'object') {\n    validation.errors.push('行星位置数据格式错误');\n    validation.isValid = false;\n  }\n  \n  // 检查运势数据\n  if (!convertedData.fortune) {\n    validation.warnings.push('缺少运势信息');\n  }\n  \n  // 检查宫位数据\n  if (!convertedData.houses || Object.keys(convertedData.houses).length < 12) {\n    validation.warnings.push('宫位数据不完整');\n  }\n  \n  return validation;\n}\n\n/**\n * 创建兼容的占星数据格式（用于替换本地计算）\n * @param {Object} apiData - API返回的原始数据\n * @returns {Object} 与现有应用兼容的数据格式\n */\nexport function createCompatibleAstrologyData(apiData) {\n  const convertedData = convertApiDataToAppFormat(apiData);\n  const validation = validateConvertedData(convertedData);\n  \n  if (!validation.isValid) {\n    console.error('数据验证失败:', validation.errors);\n    throw new Error('转换的数据不满足应用要求');\n  }\n  \n  if (validation.warnings.length > 0) {\n    console.warn('数据验证警告:', validation.warnings);\n  }\n  \n  // 返回与现有应用完全兼容的数据结构\n  return {\n    astrologyPositions: convertedData.astrologyPositions,\n    fortune: convertedData.fortune,\n    houses: convertedData.houses,\n    aspects: convertedData.aspects,\n    elementDistribution: convertedData.elementDistribution,\n    chart: convertedData.chart,\n    // 额外的元数据\n    dataSource: 'xingpan_api',\n    timestamp: new Date().toISOString()\n  };\n}\n\n// 导出工具函数\nexport {\n  PLANET_CODE_MAP,\n  ZODIAC_MAPPING,\n  ZODIAC_REVERSE_MAPPING,\n  convertZodiacName\n};","'use strict';\nvar $ = require('../internals/export');\nvar iterate = require('../internals/iterate');\nvar createProperty = require('../internals/create-property');\n\n// `Object.fromEntries` method\n// https://tc39.es/ecma262/#sec-object.fromentries\n$({ target: 'Object', stat: true }, {\n  fromEntries: function fromEntries(iterable) {\n    var obj = {};\n    iterate(iterable, function (k, v) {\n      createProperty(obj, k, v);\n    }, { AS_ENTRIES: true });\n    return obj;\n  }\n});\n"],"names":["PLANET_CODE_MAP","ZODIAC_MAPPING","ZODIAC_REVERSE_MAPPING","Object","fromEntries","entries","map","_ref","_ref2","_slicedToArray","en","zh","convertZodiacName","englishName","extractPlanetPositions","apiData","positions","planet","Array","isArray","console","warn","forEach","planetData","planetKey","code_name","sign","sign_english","degree","deg","minute","min","second","sec","longitude","_raw","planet_english","planet_chinese","house_id","speed","house","house10","find","midheaven","house_life","sign_chinese","essentials","missing","filter","key","length","extractHouseData","houses","houseData","houseNumber","life_palace","planets","planet_array","name","coordinates","x","z_x","y","z_y","extractAspectData","aspects","planet_allow_degree","aspect","planet1Key","planet2Key","push","planet1","planet2","angle","allow","orb","type","in_out","extractElementDistribution","distribution","elements","fire","earth","air","water","qualities","cardinal","fixed","mutable","polarities","positive","negative","attribute","elementMap","qualityMap","_ref3","_ref4","_ref5","_ref6","element","chineseNames","includes","_ref7","_ref8","quality","generateFortuneScores","planetPositions","scores","career","wealth","love","health","overall","sun","fireSign","moon","waterSign","beneficAspects","a","maleficAspects","keys","Math","max","round","convertApiDataToAppFormat","log","elementDistribution","fortuneScores","convertedData","astrologyPositions","fortune","overview","repeat","chart","svg","hasChart","_rawApiData","_convertedAt","Date","toISOString","error","Error","concat","message","validateConvertedData","validation","isValid","errors","warnings","requiredPlanets","_typeof","createCompatibleAstrologyData","dataSource","timestamp","$","iterate","createProperty","target","stat","iterable","obj","k","v","AS_ENTRIES"],"sourceRoot":""}