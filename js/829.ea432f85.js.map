{"version":3,"file":"js/829.ea432f85.js","mappings":"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","sources":["webpack://meiban-app/./src/services/astrologyApiService.js"],"sourcesContent":["/**\n * 星盘API服务 - 集成第三方星盘API\n * src/services/astrologyApiService.js\n */\n\nimport { getCoordinatesFromLocation } from '../utils/cityCoordinates.js';\n\n// API配置\nconst API_CONFIG = {\n  // 使用 Cloudflare Worker 代理\n  baseUrl: 'https://xingpan-proxy.kidyuan.workers.dev',\n  // Worker 会在服务端注入 access_token，前端不需要携带\n  // API参数配置\n  defaultParams: {\n    h_sys: 'P', // 宫位系统\n    planets: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 't'], // 行星列表\n    virtual: ['10'], // 虚点\n    // 相位配置\n    phase: {\n      '0': 0,\n      '30': 2,\n      '36': 2, \n      '45': 2,\n      '60': 6,\n      '72': 2,\n      '90': 6,\n      '120': 6,\n      '135': 0.5,\n      '144': 2,\n      '150': 2,\n      '180': 6\n    },\n    ay: '-1',\n    tomorrow_type: '1',\n    svg_type: '1'\n  },\n  // 请求超时时间\n  timeout: 15000,\n  // 最大重试次数\n  maxRetries: 2\n};\n\n/**\n * 格式化出生日期时间\n * @param {string} birthdate - 出生日期 (YYYY-MM-DD)\n * @param {number} birthHour - 出生小时\n * @param {number} birthMinute - 出生分钟\n * @returns {string} 格式化的日期时间字符串\n */\nfunction formatBirthDateTime(birthdate, birthHour, birthMinute) {\n  const hour = String(birthHour || 0).padStart(2, '0');\n  const minute = String(birthMinute || 0).padStart(2, '0');\n  return `${birthdate} ${hour}:${minute}`;\n}\n\n/**\n * 获取城市坐标信息\n * @param {string} birthplace - 出生地名称\n * @returns {Object} 包含经纬度的对象\n */\nfunction getLocationCoordinates(birthplace) {\n  try {\n    // 尝试从城市坐标数据中获取\n    const coordinates = getCoordinatesFromLocation(birthplace);\n    if (coordinates && coordinates.lat && coordinates.lng) {\n      return {\n        latitude: coordinates.lat,\n        longitude: coordinates.lng\n      };\n    }\n    \n    // 如果没有找到，返回天台县的坐标作为默认值\n    console.warn(`未找到 ${birthplace} 的坐标信息，使用默认坐标`);\n    return {\n      latitude: 29.13,\n      longitude: 121.03\n    };\n  } catch (error) {\n    console.error('获取坐标信息失败:', error);\n    // 返回天台县坐标作为后备\n    return {\n      latitude: 29.13,\n      longitude: 121.03\n    };\n  }\n}\n\n/**\n * 构建API请求参数\n * @param {Object} userData - 用户数据\n * @returns {Object} API请求参数\n */\nfunction buildApiParams(userData) {\n  const { birthdate, birthHour, birthMinute, birthplace } = userData;\n  \n  // 获取坐标信息\n  const coordinates = getLocationCoordinates(birthplace);\n  \n  // 格式化出生时间\n  const formattedDateTime = formatBirthDateTime(birthdate, birthHour, birthMinute);\n  \n  // 构建请求参数（不包含 access_token，由 Worker 在服务端注入）\n  const params = {\n    longitude: coordinates.longitude.toString(),\n    latitude: coordinates.latitude.toString(),\n    tz: '8.00', // 中国时区 UTC+8\n    h_sys: API_CONFIG.defaultParams.h_sys,\n    birthday: formattedDateTime,\n    ay: API_CONFIG.defaultParams.ay,\n    tomorrow_type: API_CONFIG.defaultParams.tomorrow_type,\n    svg_type: API_CONFIG.defaultParams.svg_type\n  };\n  \n  // 添加行星参数\n  API_CONFIG.defaultParams.planets.forEach((planet, index) => {\n    params[`planets[${index}]`] = planet;\n  });\n  \n  // 添加虚点参数\n  API_CONFIG.defaultParams.virtual.forEach((virtual, index) => {\n    params[`virtual[${index}]`] = virtual;\n  });\n  \n  // 添加相位参数\n  Object.entries(API_CONFIG.defaultParams.phase).forEach(([angle, value]) => {\n    params[`phase[${angle}]`] = value;\n  });\n  \n  return params;\n}\n\n/**\n * 发送API请求\n * @param {Object} params - 请求参数\n * @returns {Promise<Object>} API响应数据\n */\nasync function sendApiRequest(params) {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);\n  \n  try {\n    // 构建URLSearchParams\n    const formData = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n    \n    console.log('🚀 发送星盘API请求 (通过Cloudflare Worker):', API_CONFIG.baseUrl);\n    console.log('📋 请求参数:', params);\n    console.log('📤 请求体 (form-data):', formData.toString());\n\n    const response = await fetch(API_CONFIG.baseUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Origin': window.location.origin // 为 CORS 设置正确的 Origin\n      },\n      body: formData,\n      signal: controller.signal\n    });\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      throw new Error(`API请求失败: ${response.status} ${response.statusText}`);\n    }\n    \n    const responseText = await response.text();\n    console.log('📥 原始响应:', responseText);\n\n    let data;\n    try {\n      data = JSON.parse(responseText);\n    } catch (parseError) {\n      console.error('❌ JSON解析失败:', parseError);\n      throw new Error(`响应解析失败: ${responseText}`);\n    }\n\n    console.log('✅ API响应成功');\n    console.log('📦 响应数据:', data);\n\n    if (data.code !== 0) {\n      throw new Error(`API返回错误 (code: ${data.code}): ${data.msg || '未知错误'}`);\n    }\n    \n    return data;\n    \n  } catch (error) {\n    clearTimeout(timeoutId);\n    \n    if (error.name === 'AbortError') {\n      throw new Error('API请求超时');\n    }\n    \n    console.error('❌ API请求失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 带重试机制的API调用\n * @param {Object} userData - 用户数据\n * @returns {Promise<Object>} API响应数据\n */\nasync function callApiWithRetry(userData) {\n  const params = buildApiParams(userData);\n  let lastError;\n  \n  for (let attempt = 1; attempt <= API_CONFIG.maxRetries; attempt++) {\n    try {\n      console.log(`🔄 API调用尝试 ${attempt}/${API_CONFIG.maxRetries}`);\n      const result = await sendApiRequest(params);\n      return result;\n    } catch (error) {\n      lastError = error;\n      \n      if (attempt < API_CONFIG.maxRetries) {\n        const delay = Math.pow(2, attempt) * 1000; // 指数退避\n        console.warn(`⚠️ 第${attempt}次尝试失败，${delay}ms后重试:`, error.message);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  \n  console.error(`❌ API调用失败，已达到最大重试次数 (${API_CONFIG.maxRetries}):`, lastError);\n  throw lastError;\n}\n\n/**\n * 获取星盘数据的主要接口\n * @param {Object} userData - 用户输入数据\n * @returns {Promise<Object>} 处理后的星盘数据\n */\nexport async function fetchAstrologyData(userData) {\n  try {\n    // 验证输入数据\n    if (!userData || !userData.birthdate || !userData.birthplace) {\n      throw new Error('缺少必要的出生信息（日期和地点）');\n    }\n    \n    console.log('🌟 开始获取星盘数据');\n    console.log('👤 用户数据:', userData);\n    \n    // 调用API\n    const apiResponse = await callApiWithRetry(userData);\n    \n    if (!apiResponse.data) {\n      throw new Error('API返回数据格式错误');\n    }\n    \n    console.log('🎯 星盘数据获取成功');\n    return apiResponse.data;\n    \n  } catch (error) {\n    console.error('🚫 获取星盘数据失败:', error);\n    throw new Error(`星盘API调用失败: ${error.message}`);\n  }\n}\n\n/**\n * 检查API服务是否可用\n * @returns {Promise<boolean>} API服务可用性\n */\nexport async function checkApiHealth() {\n  try {\n    // 使用测试数据检查API\n    const testData = {\n      birthdate: '1981-11-17',\n      birthHour: 0,\n      birthMinute: 50,\n      birthplace: '浙江省台州市天台县'\n    };\n    \n    await fetchAstrologyData(testData);\n    return true;\n  } catch (error) {\n    console.error('API健康检查失败:', error);\n    return false;\n  }\n}\n\n/**\n * 设置API令牌 (已弃用，Worker 模式下由服务端管理)\n * @param {string} token - API令牌 (Worker 模式下忽略)\n * @deprecated Worker 模式下 token 由服务端管理，此方法已无效\n */\nexport function setApiToken() {\n  console.warn('⚠️ Worker 模式下 API 令牌由服务端管理，setApiToken 方法已无效');\n}\n\n/**\n * 获取当前API配置\n * @returns {Object} 当前配置信息（不包含敏感信息）\n */\nexport function getApiConfig() {\n  return {\n    baseUrl: API_CONFIG.baseUrl,\n    timeout: API_CONFIG.timeout,\n    maxRetries: API_CONFIG.maxRetries,\n    proxyMode: 'Cloudflare Worker',\n    tokenManagement: 'Server-side'\n  };\n}\n\n// 导出默认配置供测试使用\nexport { API_CONFIG };"],"names":["API_CONFIG","baseUrl","defaultParams","h_sys","planets","virtual","phase","ay","tomorrow_type","svg_type","timeout","maxRetries","formatBirthDateTime","birthdate","birthHour","birthMinute","hour","String","padStart","minute","concat","getLocationCoordinates","birthplace","coordinates","getCoordinatesFromLocation","lat","lng","latitude","longitude","console","warn","error","buildApiParams","userData","formattedDateTime","params","toString","tz","birthday","forEach","planet","index","Object","entries","_ref","_ref2","_slicedToArray","angle","value","sendApiRequest","_x","_sendApiRequest","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","controller","timeoutId","formData","response","responseText","data","wrap","_context","prev","next","AbortController","setTimeout","abort","URLSearchParams","_ref3","_ref4","key","append","log","fetch","method","headers","window","location","origin","body","signal","sent","clearTimeout","ok","Error","status","statusText","text","JSON","parse","t0","code","msg","abrupt","t1","name","stop","callApiWithRetry","_x2","_callApiWithRetry","_callee2","lastError","_loop","_ret","attempt","_context3","result","delay","_context2","v","Math","pow","message","Promise","resolve","delegateYield","fetchAstrologyData","_x3","_fetchAstrologyData","_callee3","apiResponse","_context4","checkApiHealth","_checkApiHealth","_callee4","testData","_context5","setApiToken","getApiConfig","proxyMode","tokenManagement"],"sourceRoot":""}