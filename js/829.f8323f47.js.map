{"version":3,"file":"js/829.f8323f47.js","mappings":"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","sources":["webpack://meiban-app/./src/services/astrologyApiService.js"],"sourcesContent":["/**\n * 星盘API服务 - 集成第三方星盘API\n * src/services/astrologyApiService.js\n */\n\nimport { getCoordinatesFromLocation } from '../utils/cityCoordinates.js';\n\n// API配置\nconst API_CONFIG = {\n  baseUrl: 'https://www.xingpan.vip/astrology/chart/natal',\n  // 默认API令牌，实际使用时应从环境变量获取\n  defaultToken: process.env.VUE_APP_ASTROLOGY_API_TOKEN || '989f888c4283e2cc2d8a5aa4af60932c',\n  // 默认API参数\n  defaultParams: {\n    h_sys: 'P', // 宫位系统\n    planets: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 't'], // 行星列表\n    virtual: ['10'], // 虚点\n    // 相位配置\n    phase: {\n      '0': 0,\n      '30': 2,\n      '36': 2, \n      '45': 2,\n      '60': 6,\n      '72': 2,\n      '90': 6,\n      '120': 6,\n      '135': 0.5,\n      '144': 2,\n      '150': 2,\n      '180': 6\n    },\n    ay: '-1',\n    tomorrow_type: '1',\n    svg_type: '1'\n  },\n  // 请求超时时间\n  timeout: 15000,\n  // 最大重试次数\n  maxRetries: 2\n};\n\n/**\n * 格式化出生日期时间\n * @param {string} birthdate - 出生日期 (YYYY-MM-DD)\n * @param {number} birthHour - 出生小时\n * @param {number} birthMinute - 出生分钟\n * @returns {string} 格式化的日期时间字符串\n */\nfunction formatBirthDateTime(birthdate, birthHour, birthMinute) {\n  const hour = String(birthHour || 0).padStart(2, '0');\n  const minute = String(birthMinute || 0).padStart(2, '0');\n  return `${birthdate} ${hour}:${minute}`;\n}\n\n/**\n * 获取城市坐标信息\n * @param {string} birthplace - 出生地名称\n * @returns {Object} 包含经纬度的对象\n */\nfunction getLocationCoordinates(birthplace) {\n  try {\n    // 尝试从城市坐标数据中获取\n    const coordinates = getCoordinatesFromLocation(birthplace);\n    if (coordinates && coordinates.lat && coordinates.lng) {\n      return {\n        latitude: coordinates.lat,\n        longitude: coordinates.lng\n      };\n    }\n    \n    // 如果没有找到，返回天台县的坐标作为默认值\n    console.warn(`未找到 ${birthplace} 的坐标信息，使用默认坐标`);\n    return {\n      latitude: 29.13,\n      longitude: 121.03\n    };\n  } catch (error) {\n    console.error('获取坐标信息失败:', error);\n    // 返回天台县坐标作为后备\n    return {\n      latitude: 29.13,\n      longitude: 121.03\n    };\n  }\n}\n\n/**\n * 构建API请求参数\n * @param {Object} userData - 用户数据\n * @returns {Object} API请求参数\n */\nfunction buildApiParams(userData) {\n  const { birthdate, birthHour, birthMinute, birthplace } = userData;\n  \n  // 获取坐标信息\n  const coordinates = getLocationCoordinates(birthplace);\n  \n  // 格式化出生时间\n  const formattedDateTime = formatBirthDateTime(birthdate, birthHour, birthMinute);\n  \n  // 构建请求参数\n  const params = {\n    access_token: API_CONFIG.defaultToken,\n    longitude: coordinates.longitude.toString(),\n    latitude: coordinates.latitude.toString(),\n    tz: '8.00', // 中国时区 UTC+8\n    h_sys: API_CONFIG.defaultParams.h_sys,\n    birthday: formattedDateTime,\n    ay: API_CONFIG.defaultParams.ay,\n    tomorrow_type: API_CONFIG.defaultParams.tomorrow_type,\n    svg_type: API_CONFIG.defaultParams.svg_type\n  };\n  \n  // 添加行星参数\n  API_CONFIG.defaultParams.planets.forEach((planet, index) => {\n    params[`planets[${index}]`] = planet;\n  });\n  \n  // 添加虚点参数\n  API_CONFIG.defaultParams.virtual.forEach((virtual, index) => {\n    params[`virtual[${index}]`] = virtual;\n  });\n  \n  // 添加相位参数\n  Object.entries(API_CONFIG.defaultParams.phase).forEach(([angle, value]) => {\n    params[`phase[${angle}]`] = value;\n  });\n  \n  return params;\n}\n\n/**\n * 发送API请求\n * @param {Object} params - 请求参数\n * @returns {Promise<Object>} API响应数据\n */\nasync function sendApiRequest(params) {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);\n  \n  try {\n    // 构建URLSearchParams\n    const formData = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n    \n    console.log('🚀 发送星盘API请求:', API_CONFIG.baseUrl);\n    console.log('📋 请求参数:', params);\n    \n    const response = await fetch(API_CONFIG.baseUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'User-Agent': 'MeibanApp/2.0'\n      },\n      body: formData,\n      signal: controller.signal\n    });\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      throw new Error(`API请求失败: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    \n    console.log('✅ API响应成功');\n    console.log('📦 响应数据:', data);\n    \n    if (data.code !== 0) {\n      throw new Error(`API返回错误: ${data.msg || '未知错误'}`);\n    }\n    \n    return data;\n    \n  } catch (error) {\n    clearTimeout(timeoutId);\n    \n    if (error.name === 'AbortError') {\n      throw new Error('API请求超时');\n    }\n    \n    console.error('❌ API请求失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 带重试机制的API调用\n * @param {Object} userData - 用户数据\n * @returns {Promise<Object>} API响应数据\n */\nasync function callApiWithRetry(userData) {\n  const params = buildApiParams(userData);\n  let lastError;\n  \n  for (let attempt = 1; attempt <= API_CONFIG.maxRetries; attempt++) {\n    try {\n      console.log(`🔄 API调用尝试 ${attempt}/${API_CONFIG.maxRetries}`);\n      const result = await sendApiRequest(params);\n      return result;\n    } catch (error) {\n      lastError = error;\n      \n      if (attempt < API_CONFIG.maxRetries) {\n        const delay = Math.pow(2, attempt) * 1000; // 指数退避\n        console.warn(`⚠️ 第${attempt}次尝试失败，${delay}ms后重试:`, error.message);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  \n  console.error(`❌ API调用失败，已达到最大重试次数 (${API_CONFIG.maxRetries}):`, lastError);\n  throw lastError;\n}\n\n/**\n * 获取星盘数据的主要接口\n * @param {Object} userData - 用户输入数据\n * @returns {Promise<Object>} 处理后的星盘数据\n */\nexport async function fetchAstrologyData(userData) {\n  try {\n    // 验证输入数据\n    if (!userData || !userData.birthdate || !userData.birthplace) {\n      throw new Error('缺少必要的出生信息（日期和地点）');\n    }\n    \n    console.log('🌟 开始获取星盘数据');\n    console.log('👤 用户数据:', userData);\n    \n    // 调用API\n    const apiResponse = await callApiWithRetry(userData);\n    \n    if (!apiResponse.data) {\n      throw new Error('API返回数据格式错误');\n    }\n    \n    console.log('🎯 星盘数据获取成功');\n    return apiResponse.data;\n    \n  } catch (error) {\n    console.error('🚫 获取星盘数据失败:', error);\n    throw new Error(`星盘API调用失败: ${error.message}`);\n  }\n}\n\n/**\n * 检查API服务是否可用\n * @returns {Promise<boolean>} API服务可用性\n */\nexport async function checkApiHealth() {\n  try {\n    // 使用测试数据检查API\n    const testData = {\n      birthdate: '1981-11-17',\n      birthHour: 0,\n      birthMinute: 50,\n      birthplace: '浙江省台州市天台县'\n    };\n    \n    await fetchAstrologyData(testData);\n    return true;\n  } catch (error) {\n    console.error('API健康检查失败:', error);\n    return false;\n  }\n}\n\n/**\n * 设置API令牌\n * @param {string} token - 新的API令牌\n */\nexport function setApiToken(token) {\n  if (token && typeof token === 'string') {\n    API_CONFIG.defaultToken = token;\n    console.log('🔑 API令牌已更新');\n  }\n}\n\n/**\n * 获取当前API配置\n * @returns {Object} 当前配置信息（不包含敏感信息）\n */\nexport function getApiConfig() {\n  return {\n    baseUrl: API_CONFIG.baseUrl,\n    timeout: API_CONFIG.timeout,\n    maxRetries: API_CONFIG.maxRetries,\n    hasToken: !!API_CONFIG.defaultToken\n  };\n}\n\n// 导出默认配置供测试使用\nexport { API_CONFIG };"],"names":["API_CONFIG","baseUrl","defaultToken","process","defaultParams","h_sys","planets","virtual","phase","ay","tomorrow_type","svg_type","timeout","maxRetries","formatBirthDateTime","birthdate","birthHour","birthMinute","hour","String","padStart","minute","concat","getLocationCoordinates","birthplace","coordinates","getCoordinatesFromLocation","lat","lng","latitude","longitude","console","warn","error","buildApiParams","userData","formattedDateTime","params","access_token","toString","tz","birthday","forEach","planet","index","Object","entries","_ref","_ref2","_slicedToArray","angle","value","sendApiRequest","_x","_sendApiRequest","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","controller","timeoutId","formData","response","data","wrap","_context","prev","next","AbortController","setTimeout","abort","URLSearchParams","_ref3","_ref4","key","append","log","fetch","method","headers","body","signal","sent","clearTimeout","ok","Error","status","statusText","json","code","msg","abrupt","t0","name","stop","callApiWithRetry","_x2","_callApiWithRetry","_callee2","lastError","_loop","_ret","attempt","_context3","result","delay","_context2","v","Math","pow","message","Promise","resolve","delegateYield","fetchAstrologyData","_x3","_fetchAstrologyData","_callee3","apiResponse","_context4","checkApiHealth","_checkApiHealth","_callee4","testData","_context5","setApiToken","token","getApiConfig","hasToken"],"sourceRoot":""}